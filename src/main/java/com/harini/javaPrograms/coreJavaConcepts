
-- Wrapper class
A wrapper class converts the primitive data type such as int, byte, char, boolean, etc. to the objects of their respective classes
such as Integer, Byte, Character, Boolean, etc.

-- Autoboxing
Converting the primitive datatype (int, float, double, char) to the wrapper classes (Integer, Float, Double, Character) object automatically.
Ex:
int i = 5;
Integer j = new Integer(i); // boxing
Integer x = i ; // autoboxing

int k = j.intValue(); // Unboxing
int l = j;  // auto unboxing

Note: Autoboxing is used in the collections
Ex: ArrayList<Integer> list = new ArrayList<>();
list.add(5);  // auotboxing is happening here, conversion of 5  (int) into Integer object
list.add(4);

-- Typecasting
When we assign a value of one data type to the different data type then these two data types may not be compatible and needs a conversion.
 If the data types are compatible (for example assigning int value to long) then java does the automatic conversion and does not require casting.
  However, if the data types are not compatible then they need to be cast for conversion.
For example:
//here in the brackets we have mentioned long keyword, this is casting
double num = 10001.99;
long num2 = (long)num;

-- Different Data types in Java.
   byte – 8 bit
   short – 16 bit
   char – 16 bit Unicode
   int – 32 bit (whole number)
   float – 32 bit (real number)
   long – 64 bit (Single precision)
   double – 64 bit (double precision)

-- Unicode
   Java uses Unicode to represent the characters.

-- Literals
Any constant value that is assigned to a variable is called literal in Java. For example –
// Here 101 is a literal
int num = 101