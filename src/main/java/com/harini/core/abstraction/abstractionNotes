--Abstraction
Abstraction is a process of hiding the implementation details and showing only functionality to the user.
 Mostly, we don't know about the implementation class (which is hidden to the end user), and
 an object of the implementation class is provided by the factory method.

--Ways to achieve Abstraction
There are two ways to achieve abstraction in java
1.Abstract class (0 to 100%)
2. Interface (100% )
Abstract class:
        An abstract class must be declared with an abstract keyword.
        It can have abstract and non-abstract methods.
        It cannot be instantiated.
        It can have constructors and static methods also and even main() method.
        It can have final methods which will force the subclass not to change the body of the method.

Rules:
-- If there is an abstract method in a class, that class must be abstract.
-- If you are extending an abstract class that has an abstract method, you must either provide the implementation of the method or make this class abstract.

Note:
--Difference between Abstract Class  and Java 8 Interface
 After having default and static methods inside the interface, we think about the need of abstract class in Java.
 An interface and an abstract class is almost similar except that you can create constructor in the abstract class
 whereas you can't do this in interface.

 --------------------------------------------------
Abstract class and interface both are used to achieve abstraction where we can declare the abstract methods.
Abstract class and interface both can't be instantiated.

--DIFFERENCES:
ABSTRACT CLASS                                                                                  INTERFACE
Abstract class can have abstract and non-abstract methods.	                    Interface can have only abstract methods. Since Java 8, it can have default and static methods also.
2) Abstract class doesn't support multiple inheritance.	                        Interface supports multiple inheritance.
3) Abstract class can have final, non-final, static and non-static variables.	Interface has only static and final variables.
4) Abstract class can provide the implementation of interface.	                Interface can't provide the implementation of abstract class.
5) The abstract keyword is used to declare abstract class.	                    The interface keyword is used to declare interface.
6) An abstract class can extend another Java class and implement                An interface can extend another Java interface only
multiple Java interfaces.	.
7) An abstract class can be extended using keyword "extends".	                An interface can be implemented using keyword "implements".
8) A Java abstract class can have class members like private, protected, etc.	Members of a Java interface are public by default.


Simply, abstract class achieves partial abstraction (0 to 100%) whereas interface achieves fully abstraction (100%).
---------------------------------------------------
An interface in Java is a blueprint of a class.
Interface fields(variables) are public, static and final by default, and the methods are public and abstract.

Since Java 8, we can have default and static methods in an interface.
Since Java 9, we can have private methods in an interface.

A class that implements an interface must implement all the methods declared in the interface.
Java Interface also represents the IS-A relationship.
It cannot be instantiated just like the abstract class.
--Use of Interface:
1. to achieve abstracton
2. to implement Multiple inheritance
3. to achieve loose coupling

-- Relationship between classes and interfaces
A class extends another class,
A class implements an interface
An Interface extends another interface

-- Multiple inheritance in Java by interface is achieved as follows
A class implements 2 interfaces
an interface extends 2 interfaces

the ambiguity issue is resolved if we use intefaces to implement Multiple inheritance. Since the implementation is provided by the implementation class.

Note: since the methods in interface are public by default,
the overriding methods must be public in order to avoid the access privilege issue.

-- QUESTIONS:
What is marker or tagged interface?
An interface which has no member is known as a marker or tagged interface, for example, Serializable, Cloneable, Remote, etc.
They are used to provide some essential information to the JVM so that JVM may perform some useful operation.
----------------------------------------------------------
Nested Interface
An interface i.e. declared within another interface or class is known as nested interface.
Points to remember:
1. Nested interface must be public if it is declared inside the interface but it can have any access modifier if declared within the class.
2. Nested interfaces are declared static implicitely.

-- Question
Can we define a class inside the interface?
Yes, If we define a class inside the interface, java compiler creates a static nested class.
