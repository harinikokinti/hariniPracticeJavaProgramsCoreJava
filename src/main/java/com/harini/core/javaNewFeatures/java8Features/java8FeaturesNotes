-- Java 8 Features

Oracle released a new version of Java as Java 8 in March 18, 2014.
It was a revolutionary release of the Java for software development platform. It includes various upgrades to the Java programming, JVM, Tools and libraries.

Java 8 provides following features for Java Programming:


Lambda expressions,
Method references,
Functional interfaces,
Stream API,
Default methods,
Base64 Encode Decode,
Static methods in interface,
Optional class,
Collectors class,
ForEach() method,
Parallel array sorting,
Nashorn JavaScript Engine,
Parallel Array Sorting,
type Inference
Type and Repeating Annotations,
IO Enhancements,
Concurrency Enhancements,
JDBC Enhancements etc.
Spliterator
Date/Time API
--------------------------------------------------------------------------------------------------------------------------------------------

-- Fundamentals of Functional Programming:
    - Declarative Programming model
    - Work on functions
    - Immutable
    - Pgms work by returning the values instead of modifying values
    - Suitable for parallel programming(funcitons can run parallely without collision)
    - Java is not pure funcitonal programming. It is both objecta nd funcitonal
    - Uses Recursion for iteration
    - Abstraction on both data and behaviour
    - Features:
        - First-class funcitons
        - higer order funcitons
        - Immutable data
        - Pure functions
        - Recursion
        - manipulation of lists
        - Lazy Evaluation


-- Lambda Expression:
A function that can be shared or referred to as an object.
1. To provide the implementation of Functional interface(one abstract method interface).
2. Less coding.

Java lambda expression consists of three components.
1) Argument-list: It can be empty or non-empty as well.
2) Arrow-token: It is used to link arguments-list and body of expression.
3) Body: It contains expressions and statements for lambda expression.

No Parameter Syntax
() -> {
//Body of no parameter lambda
}

One Parameter Syntax
(p1) -> {
//Body of single parameter lambda
}

Two Parameter Syntax
(p1,p2) -> {
//Body of multiple parameter lambda
}

Note: Lambda expresssion is the implementation of the single method of functional interface


-- Method Reference:
    Uses function as a parameter to invoke a method.  (call by Method)  , pass a method as argument into another method
   Method reference is used to refer method of functional interface.
   A lambda expression is replaced with the method reference if it is used multiple times(more compact way).

   --Types of Method References
   1. Reference to a static method
       Syntax: ContainingClass::staticMethodName
   2. Reference to an instance method
       Syntax: containingClassObject::instanceMethodName
   3. Reference to a constructor -- can refer a constructor by using the new keyword.
       Syntax: ClassName::new

-- Streams
Java provides a new additional package in Java 8 called java.util.stream.
This package consists of classes, interfaces and enum which allows functional-style operations on the elements.
Streams can be used to filter, collect, print, and convert from one data structure to other.
Streams can be used to iterate any number of times
Stream provides predefined methods to deal with the logic you implement.

Note: Streams don't change the original data structure, they only provide the result as per the pipelined methods.






-- Predefined Functional Interfaces:

INTERFACE	                                DESCRIPTION
BiConsumer<T,U>	It represents an operation that accepts two input arguments and returns no result.
Consumer<T>	It represents an operation that accepts a single argument and returns no result.
Function<T,R>	It represents a function that accepts one argument and returns a result.
Predicate<T>	It represents a predicate (boolean-valued function) of one argument.
BiFunction<T,U,R>	It represents a function that accepts two arguments and returns a a result.
BinaryOperator<T>	It represents an operation upon two operands of the same data type. It returns a result of the same type as the operands.
BiPredicate<T,U>	It represents a predicate (boolean-valued function) of two arguments.
BooleanSupplier	It represents a supplier of boolean-valued results.
DoubleBinaryOperator	It represents an operation upon two double type operands and returns a double type value.
DoubleConsumer	It represents an operation that accepts a single double type argument and returns no result.
DoubleFunction<R>	It represents a function that accepts a double type argument and produces a result.
DoublePredicate	It represents a predicate (boolean-valued function) of one double type argument.
DoubleSupplier	It represents a supplier of double type results.
DoubleToIntFunction	It represents a function that accepts a double type argument and produces an int type result.
DoubleToLongFunction	It represents a function that accepts a double type argument and produces a long type result.
DoubleUnaryOperator	It represents an operation on a single double type operand that produces a double type result.
IntBinaryOperator	It represents an operation upon two int type operands and returns an int type result.
IntConsumer	It represents an operation that accepts a single integer argument and returns no result.
IntFunction<R>	It represents a function that accepts an integer argument and returns a result.
IntPredicate	It represents a predicate (boolean-valued function) of one integer argument.
IntSupplier	It represents a supplier of integer type.
IntToDoubleFunction	It represents a function that accepts an integer argument and returns a double.
IntToLongFunction	It represents a function that accepts an integer argument and returns a long.
IntUnaryOperator	It represents an operation on a single integer operand that produces an integer result.
LongBinaryOperator	It represents an operation upon two long type operands and returns a long type result.
LongConsumer	It represents an operation that accepts a single long type argument and returns no result.
LongFunction<R>	It represents a function that accepts a long type argument and returns a result.
LongPredicate	It represents a predicate (boolean-valued function) of one long type argument.
LongSupplier	It represents a supplier of long type results.
LongToDoubleFunction	It represents a function that accepts a long type argument and returns a result of double type.
LongToIntFunction	It represents a function that accepts a long type argument and returns an integer result.
LongUnaryOperator	It represents an operation on a single long type operand that returns a long type result.
ObjDoubleConsumer<T>	It represents an operation that accepts an object and a double argument, and returns no result.
ObjIntConsumer<T>	It represents an operation that accepts an object and an integer argument. It does not return result.
ObjLongConsumer<T>	It represents an operation that accepts an object and a long argument, it returns no result.
Supplier<T>	It represents a supplier of results.
ToDoubleBiFunction<T,U>	It represents a function that accepts two arguments and produces a double type result.
ToDoubleFunction<T>	It represents a function that returns a double type result.
ToIntBiFunction<T,U>	It represents a function that accepts two arguments and returns an integer.
ToIntFunction<T>	It represents a function that returns an integer.
ToLongBiFunction<T,U>	It represents a function that accepts two arguments and returns a result of long type.
ToLongFunction<T>	It represents a function that returns a result of long type.
UnaryOperator<T>	It represents an operation on a single operand that returnsa a result of the same type as its operand.
