package com.harini.core.javaNewFeatures.java8Features;
/*
Java 8 has included two new features repeating and type annotations
-- Type Annotations
Annotations can be applied to any type use. It means that annotations can be used anywhere you use a type.
In early Java versions, you can apply annotations only to declarations.

For example, if you want to avoid NullPointerException in your code, you can declare a string variable like this:
@NonNull String str;
Examples of type annotations:
@Nonnull List<String>
List<NonNull String> str
Arrays<NonNegative Integer> sort
@Encrypted File file
@Open Connection connection
void divideInteger(int a, int b) throws @ZeroDivisor ArithmeticException

Note - Java created type annotations to support improved analysis of Java programs. It supports way of ensuring stronger type checking.

-- Repeating Annotations :  to reuse or repeat the same annotation to a declaration anywhere
Repeating annotations are stored in a container annotation that is automatically generated by the Java compiler.
In order for the compiler to do this, two declarations are required in your code.
1. Declare the repeatable annotation type
2. Declare the containing annotation type

1) Declare a repeatable annotation type
Declaring of repeatable annotation type must be marked with the @Repeatable meta-annotation.
We have to pass the class name as a parameter to the meta-annotation @Repeatable where the compiler
can store all the multiple annotations and that acts as a container for values.
@Repeatable(value = Countries.class)
interface @Country {
String name;
}

2) Containing annotation :
The container annotation can be declared as normal annotation and it has to have a value variable whose type is an array of above Repeatable annotation.

interface @Countries{
Country[] value() default {}
}

Note - Compiler will throw a compile-time error, if you apply the same annotation to a declaration without first declaring it as repeatable.
 */
// Implementing Repeatable annotations

import java.lang.annotation.Repeatable;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.reflect.Field;
import java.lang.reflect.Method;

// Declare repeatable annotation
@Retention(RetentionPolicy.RUNTIME)
@Repeatable(value=Countries.class)
@interface Country{
    String name();
        }

// Declare the containing annotation
@Retention(RetentionPolicy.RUNTIME)
@interface Countries{
    Country[] value() default{};
}

// Access the annotation
// Now the item class can define the same annotation multiple times on a single item

class Item {
    @Country(name = "India")
    @Country(name = "USA")
    String Laptop;
}

//mRetreiving the Annotation
public class TypeAndRepeatingAnnotations {
    public static void main(String[] args) throws NoSuchFieldException,
            SecurityException {
        Item items = new Item();
        Class<?> c = items.getClass();
        Field fd = c.getDeclaredField("Laptop");
        Country[] countries = fd.getAnnotationsByType(Country.class);
        for (Country country : countries) {
            System.out.println(country.name());
        }
    }
}
