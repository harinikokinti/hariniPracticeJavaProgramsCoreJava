MULTITHREADING
--------------

Multitasking is a process of executing multiple tasks simultaneously. We use multitasking to utilize the CPU. Multitasking can be achieved in two ways:

1) Process-based Multitasking (Multiprocessing)
    Each process has an address in memory. In other words, each process allocates a separate memory area.
    A process is heavyweight.
    Cost of communication between the process is high.
    Switching from one process to another requires some time for saving and loading registers , memory maps, updating lists, etc.
2) Thread-based Multitasking (Multithreading)
    Threads share the same address space.
    A thread is lightweight.
    Cost of communication between the thread is low.

--Advantages of Java Multithreading
    1) It doesn't block the user because threads are independent and you can perform multiple operations at the same time.
    2) You can perform many operations together, so it saves time.
    3) Threads are independent, so it doesn't affect other threads if an exception occurs in a single thread.

-- Thread : A thread is a lightweight subprocess, the smallest unit of processing. It is a separate path of execution.
            Only one thread at a time can run in a single process.

-- Life cycle of a Thread
New  :  the thread is in new state if an instance is created for the thread class but before the invocation of start() method
Runnable : Once the start() method is invoked, but hread scheduler has not selected it
Running : the thread scheduler has selected it
Non-Runnable (Blocked) :  not eligible to run , but still alive
Terminated : dead state when its run() method exits.

-- How to create thread
   There are two ways to create a thread:
   1. By extending Thread class
   2. By implementing Runnable interface.

    1. Java Thread class
      Java provides Thread class to achieve thread programming. Thread class provides constructors
      and methods to create and perform operations on a thread. Thread class extends Object class
      and implements Runnable interface.
      --Java Thread Methods  : start(), run(), sleep(), currentThread(), join(), destroy()  etc
      --Starting a thread:
      start() method of Thread class is used to start a newly created thread. It performs following tasks:
        A new thread starts(with new callstack).
        The thread moves from New state to the Runnable state.
        When the thread gets a chance to execute, its target run() method will run.

    2. Runnable Interface:
    The Runnable interface should be implemented by any class whose instances are intended to be executed by a thread.
    Runnable interface have only one method named run().
    public void run(): is used to perform action for a thread.

-- Thread Scheduler in Java
    Thread scheduler in java is the part of the JVM that decides which thread should run.
    There is no guarantee that which runnable thread will be chosen to run by the thread scheduler.
    Only one thread at a time can run in a single process.
    The thread scheduler mainly uses preemptive or time slicing scheduling to schedule the threads.

-- Preemptive scheduling, the highest priority task executes until it enters the waiting or dead states
-- Time slicing, a task executes for a predefined slice of time and then reenters the pool of ready tasks.
    The scheduler then determines which task should execute next, based on priority and other factors.

-- Sleep method : to sleep a thread for the specified amount of time.
As you know well that at a time only one thread is executed. If you sleep a thread for the specified time,the thread shedular picks up another thread and so on.

-- Can we start a thread twice
No. After starting a thread, it can never be started again. If you does so, an IllegalThreadStateException is thrown.
In such case, thread will run once but for second time, it will throw exception.

-- What if we call run() method directly instead start() method?
Each thread starts in a separate call stack.
Invoking the run() method from main thread, the run() method goes onto the current call stack rather than at the beginning of a new call stack.
It means the thread object is treated as normal class object and thread fucntionality(context switching) does not occur.

-- The join() method
The join() method waits for a thread to die.
In other words, it causes the currently running threads to stop executing until the thread it joins with completes its task.

-- Naming Thread
The Thread class provides methods to change and get the name of a thread. By default, each thread has a name i.e. thread-0, thread-1 and so on.
public String getName(): is used to return the name of a thread.
public void setName(String name): is used to change the name of a thread.

--  Current Thread
The currentThread() method returns a reference of currently executing thread.

-- Thread Priority
Each thread have a priority. Priorities are represented by a number between 1 and 10.
 In most cases, thread schedular schedules the threads according to their priority (known as preemptive scheduling).
 But it is not guaranteed because it depends on JVM specification that which scheduling it chooses.Default priority of a thread is 5 (NORM_PRIORITY)

 3 constants defined in Thread class:
    public static int MIN_PRIORITY  : value 1
    public static int NORM_PRIORITY   : value 5
    public static int MAX_PRIORITY    :value 10

-- Daemon Thread
It is a service provider thread runs automaticaaly(example gc, finalizer)
Its life depends on user threads. when user thread dies, jVM terminates this thread automatically.
It is a low priority thread.
Note: If you want to make a user thread as Daemon, it must not be started otherwise it will throw IllegalThreadStateException.

--jconsole tool
You can see all the detail by typing the jconsole in the command prompt.
The jconsole tool provides information about the loaded classes, memory usage, running threads etc.

-- Thread pool: It represents a group of worker threads that are waiting for the job and reuse many times.
In case of thread pool, a group of fixed size threads are created.
A thread from the thread pool is pulled out and assigned a job by the service provider.
After completion of the job, thread is contained in the thread pool again.

Advantage of Java Thread Pool
Better performance It saves time because there is no need to create new thread.

Real time usage
It is used in Servlet and JSP where container creates a thread pool to process the request.

-- Thread Group
A ThreadGroup represents a set of threads.
Grouping multiple threads in a single object so that we can suspend, resume or interrupt group of threads by a single method call.

A thread group can also include the other thread group. The thread group creates a tree in which every thread group except the initial thread group has a parent.
A thread is allowed to access information about its own thread group, but it cannot access the information about its thread group's parent thread group or any other thread groups.

-- Shutdown Hook
The shutdown hook can be used to perform cleanup resource or save the state when JVM shuts down normally or abruptly.
Performing clean resource means closing log file, sending some alerts or something else.
So if you want to execute some code before JVM shuts down, use shutdown hook.

The JVM shuts down when:
user presses ctrl+c on the command prompt
System.exit(int) method is invoked
user logoff
user shutdown etc.

The addShutdownHook() method of Runtime class is used to register the thread with the Virtual Machine.
The object of Runtime class can be obtained by calling the static factory method(The method that returns the instance of a class is known as factory method.) getRuntime().
The shutdown sequence can be stopped by invoking the halt(int) method of Runtime class.

-- How to perform single task by multiple threads?
If you have to perform single task by many threads, have only one run() method.

-- How to perform multiple tasks by multiple threads (multitasking in multithreading)?
If you have to perform multiple tasks by multiple threads,have multiple run() methods.

-- Garbage Collection : destroy the unused objects.
In java, garbage means unreferenced objects.
Garbage Collection is process of reclaiming the runtime unused memory automatically.
To do so, we were using free() function in C language and delete() in C++. But, in java it is performed automatically. So, java provides better memory management.

Advantage of Garbage Collection
It makes java memory efficient because garbage collector removes the unreferenced objects from heap memory.
It is automatically done by the garbage collector(a part of JVM) so we don't need to make extra efforts

How can an object be unreferenced?
By nulling the reference
By assigning a reference to another
By anonymous object etc.

1) By nulling a reference:
Employee e=new Employee();
e=null;
2) By assigning a reference to another:
Employee e1=new Employee();
Employee e2=new Employee();
e1=e2;//now the first object referred by e1 is available for garbage collection
3) By anonymous object:
new Employee();

finalize() method
The finalize() method is invoked each time before the object is garbage collected. This method can be used to perform cleanup processing. This method is defined in Object class as:

protected void finalize(){}
Note: The Garbage collector of JVM collects only those objects that are created by new keyword. So if you have created any object without new, you can use finalize method to perform cleanup processing (destroying remaining objects).
gc() method
The gc() method is used to invoke the garbage collector to perform cleanup processing. The gc() is found in System and Runtime classes.

public static void gc(){}
Note: Garbage collection is performed by a daemon thread called Garbage Collector(GC). This thread calls the finalize() method before object is garbage collected.

-- Runtime class  : to interact with java runtime environment
Java Runtime class provides methods to execute a process, invoke GC, get total and free memory etc. There is only one instance of java.lang.Runtime class is available for one java application.
The Runtime.getRuntime() method returns the singleton instance of Runtime class.
Methods:
static Runtime getRuntime()
void addShutdownHook(Thread hook)
long freeMemory()
long totalMemory()


