MULTITHREADING
--------------

Multithreading
    - process vs Thread
    - Thread Lifecycle
        - New
        - Runnable
        - Running
        - Wait
        - Sleep
        - blocked
        - Terminated/Dead
     - Ways to create Thread
        - Extending Thread Class
        - Implementing Runnable Interface
        - Implements Callable interface
            - override call method
            - call() returns a value after execution
            - create ExecutorService instance with threadPool (fixed, caches, single)
                ExecutorService exs = Executors.newFixedThreadPool(5);
            - submit the instance of the class implementing callable interface or runnable interface, create future task
                Future<String> f1 = exs.submit(c1);
            - returns reference of Future object to refer the thread submitted
            - get the value returned by thread from future
                System.out.println(f2.get());
            - shutdown the ExecutorService

    - Thread Constructs
        - sleep (invoking on thread, can be interrupted, will not release lock)
        - wait (invoking on object, releases lock once notified)
        - notify ( notifies single thread, if 4 threads are waiting, it wakes up the any thread)
        - notifyall ( it wakes up all 4 threads)
        - join (waits until it dies)
        - yield (gives  slot for other thread and goes back to runnable, )

    - Thread Synchronization
        - all operations should happen in Atomic way, Visible, Ordered
        - at a time only 1 thread is allowed to access a synchronised method or block
        - Synchronised block  (mostly preferred, since it will not lock the entire method for long time)
            synchronised(account) { // acquire lock, blocked state
            }
        - synchronised method
            synchronised void fundTransfer() {}

    - how to make collections thread safe
        - Collections.synchronised(list)
        - Concurrent Collections(use thread safe collections)
            - BlockingQueue
            - ConcurrentMap
            - ConcurrentHashMap
            - ConcurrentSkipListMap

    - Thread contention
        Multiple threads trying to access a locked resource

    - Deadlock:
        if 2 threads (t1,t2), resources r1, r2 , t1 trying r1(acaquired lock by t2) and t2 trying r2( acquired lock by t1),
        cyclic dependency happens, this is deadlock


Multitasking is a process of executing multiple tasks simultaneously. We use multitasking to utilize the CPU. Multitasking can be achieved in two ways:

1) Process-based Multitasking (Multiprocessing)
    Each process has an address in memory, runs independently. In other words, each process allocates a separate memory area.
    A process is heavyweight.
    Cost of communication between the process is high.
    Switching from one process to another requires some time for saving and loading registers , memory maps, updating lists, etc.
2) Thread-based Multitasking (Multithreading)
    Threads share the same address space(stack).
    A thread is lightweight.
    Cost of communication between the thread is low.

--Advantages of Java Multithreading
    1) It doesn't block the user because threads are independent and you can perform multiple operations at the same time.
    2) You can perform many operations together, so it saves time.
    3) Threads are independent, so it doesn't affect other threads if an exception occurs in a single thread.
    4) To utilize the complete CPU(having diff number of core orocessors ex : quad, 6, 8 core )
    5) To send asynchronic requests (In android phones, )
    6) In web applications, multithreading is used.
    7) In Gaming

-- Thread : A thread is a lightweight subprocess, the smallest unit of processing. It is a separate path of execution.
            Only one thread at a time can run in a single process.

-- Life cycle of a Thread
New  :  the thread is in new state if an instance is created for the thread class but before the invocation of start() method
Runnable : Once the start() method is invoked, but hread scheduler has not selected it
Running : the thread scheduler has selected it
sleep:
wait:
Non-Runnable (Blocked) :  not eligible to run , but still alive
Terminated : dead state when its run() method exits.

-- How to create thread
   There are three ways to create a thread:
   1. By extending Thread class
   2. By implementing Runnable interface.
   3. Implements Callable

    1. Extending Thread class
          Java provides Thread class to achieve thread programming. Thread class provides constructors
          and methods to create and perform operations on a thread. Thread class extends Object class
          and implements Runnable interface.
          --Java Thread Methods  : start(), run(), sleep(), currentThread(), join(), destroy()  etc
          --Starting a thread:
          start() method of Thread class is used to start a newly created thread. It performs following tasks:
            A new thread starts(with new callstack).
            The thread moves from New state to the Runnable state.
            When the thread gets a chance to execute, its target run() method will run.

           Note: run() method must be defined in the class which extends Thread class

    2. Implementing Runnable Interface:
        The Runnable interface should be implemented by any class whose instances are intended to be executed by a thread.
        Runnable interface have only one method named run().
        public void run(): is used to perform action for a thread.

        Note: The Runnable interface is used to create Thread in scenarios like below

        class A{ }
        class Mythread extends A, Thread {  // throws error because java doesn't support multiple inheritance
        }

        Hence this issue can be handled using interface Runnable
        class Mythread extends A, implements Runnable (its a functional interface)

    3. Implements Callable

    -- Callable interface
    To return an object after completing its execution
    It has call()  method like run() method in Runnable
    Using Executors class, can create a thread pool and create Future tasks and submit the tasks to the threads which
    implement Callable interface

    -- Executor Framework
    Executor, ExecutorService, Executors are part of Java's Executor Framework
    Since the creation and management of Threads are expensive and the operating system also imposes restrictions
    on how many Threads an application can spawn, it's a good idea is to use a pool of threads to execute tasks in parallel,
    instead of creating a new thread every time a request comes in. This not only improves the response time of the application
    but also prevent resource exhaustion errors like "java.lang.OutOfMemoryError: unable to create new native thread".

    Read more: https://javarevisited.blogspot.com/2017/02/difference-between-executor-executorservice-and-executors-in-java.html#ixzz7Y2aLet1d

    -- Executor - It is a core interface used to execute the submitted Runnable tasks.
                  An Executor is normally used instead of explicitly creating threads.
                  It has only execute() method.
    -- ExecutorService - It is an extension to Executor interface which provides a facility for returning a Future object and terminate,
                 or shut down the thread pool, and the ability to wait for and look at the status of jobs.
                 Once the shutdown is called, the thread pool will not accept new tasks but complete any pending task.
                 It also provides a submit() method which extends Executor.execute() method and returns a Future.
                 Future<T> submit(Callable<T> task);
                 Future<?> submit(Runnable task);
                 The Future object provides the facility of asynchronous execution, which means you don't need to wait until the execution
                 finishes, you can just submit the task and go around, come back and check if the Future object has the result,
                 if the execution is completed then it would have a result which you can access by using the Future.get() method.
                 Just remember that this method is a blocking method i.e. it will wait until execution finish and the result is available
                 if it's not finished already.

    -- Executors - It is a utility class similar to Collections , which provides factory methods
                   to create diff types of thread pools(ex:fixed and cached thread pools)


    Ex: ExecutorService exs = Executors.newFixedThreadPool(5); // creates 5 threads
    Future<String> f1 = exs.submit(c1); // it can accept both Callable/Runnable tasks
    System.out.println(f1.get());

    Advantage: Using thread pool, the threads can be reused once they finish their task.

--------------------------------------------------------------------------------------------------------------------------------

-- Thread Scheduler in Java
    Thread scheduler in java is the part of the JVM that decides which thread should run.
    There is no guarantee that which runnable thread will be chosen to run by the thread scheduler.
    Only one thread at a time can run in a single process.
    The thread scheduler mainly uses preemptive or time slicing scheduling to schedule the threads.

-- Preemptive scheduling, the highest priority task executes until it enters the waiting or dead states
-- Time slicing, a task executes for a predefined slice of time and then reenters the pool of ready tasks.
    The scheduler then determines which task should execute next, based on priority and other factors.

-- Sleep method : to sleep a thread for the specified amount of time.
As you know well that at a time only one thread is executed.
If you sleep a thread for the specified time,the thread shedular picks up another thread and so on.

-- Can we start a thread twice
No. After starting a thread, it can never be started again. If you does so, an IllegalThreadStateException is thrown.
In such case, thread will run once but for second time, it will throw exception.

-- What if we call run() method directly instead start() method?
Each thread starts in a separate call stack.
Invoking the run() method from main thread, the run() method goes onto the current call stack rather than at the beginning of a new call stack.
It means the thread object is treated as normal class object and thread fucntionality(context switching) does not occur.

-- The join() method
The join() method waits for a thread to die.
In other words, it causes the currently running threads to stop executing until the thread it joins with completes its task.

-- Naming Thread
The Thread class provides methods to change and get the name of a thread. By default, each thread has a name i.e. thread-0, thread-1 and so on.
public String getName(): is used to return the name of a thread.
public void setName(String name): is used to change the name of a thread.

--  Current Thread
The currentThread() method returns a reference of currently executing thread.

-- Thread Priority
Each thread have a priority. Priorities are represented by a number between 1 and 10.
 In most cases, thread schedular schedules the threads according to their priority (known as preemptive scheduling).
 But it is not guaranteed because it depends on JVM specification that which scheduling it chooses.Default priority of a thread is 5 (NORM_PRIORITY)

 3 constants defined in Thread class:
    public static int MIN_PRIORITY  : value 1
    public static int NORM_PRIORITY   : value 5
    public static int MAX_PRIORITY    :value 10

-- Daemon Thread
It is a service provider thread runs automaticaaly(example gc, finalizer)
Its life depends on user threads. when user thread dies, jVM terminates this thread automatically.
It is a low priority thread.
Note: If you want to make a user thread as Daemon, it must not be started otherwise it will throw IllegalThreadStateException.

--jconsole tool
You can see all the detail by typing the jconsole in the command prompt.
The jconsole tool provides information about the loaded classes, memory usage, running threads etc.

-- Thread pool: It represents a group of worker threads that are waiting for the job and reuse many times.
In case of thread pool, a group of fixed size threads are created.
A thread from the thread pool is pulled out and assigned a job by the service provider.
After completion of the job, thread is contained in the thread pool again.

Advantage of Java Thread Pool
Better performance It saves time because there is no need to create new thread.

Real time usage
It is used in Servlet and JSP where container creates a thread pool to process the request.
It is also used in Executor framework in Multithreading

-- Thread Group
A ThreadGroup represents a set of threads.
Grouping multiple threads in a single object so that we can suspend, resume or interrupt group of threads by a single method call.

A thread group can also include the other thread group. The thread group creates a tree in which every thread group except the initial thread group has a parent.
A thread is allowed to access information about its own thread group, but it cannot access the information about its thread group's parent thread group or any other thread groups.

-- Shutdown Hook
The shutdown hook can be used to perform cleanup resource or save the state when JVM shuts down normally or abruptly.
Performing clean resource means closing log file, sending some alerts or something else.
So if you want to execute some code before JVM shuts down, use shutdown hook.

The JVM shuts down when:
user presses ctrl+c on the command prompt
System.exit(int) method is invoked
user logoff
user shutdown etc.

The addShutdownHook() method of Runtime class is used to register the thread with the Virtual Machine.
The object of Runtime class can be obtained by calling the static factory method(The method that returns the instance of a class is known as factory method.) getRuntime().
The shutdown sequence can be stopped by invoking the halt(int) method of Runtime class.

-- How to perform single task by multiple threads?
If you have to perform single task by many threads, have only one run() method.

-- How to perform multiple tasks by multiple threads (multitasking in multithreading)?
If you have to perform multiple tasks by multiple threads,have multiple run() methods.

-- Garbage Collection : destroy the unused objects.
In java, garbage means unreferenced objects.
Garbage Collection is process of reclaiming the runtime unused memory automatically.
To do so, we were using free() function in C language and delete() in C++. But, in java it is performed automatically. So, java provides better memory management.
gc() method - invoked by Garbage collector(Daemon thread), found in System and Runtime classes, cleans up the objects which are created using new keyword
finalize() method - invoked each time before the object is garbage collected, found in Object class, cleans up the objects which are not created using new keyword

Advantage of Garbage Collection
It makes java memory efficient because garbage collector removes the unreferenced objects from heap memory.
It is automatically done by the garbage collector(a part of JVM) so we don't need to make extra efforts

How can an object be unreferenced?
By nulling the reference
By assigning a reference to another
By anonymous object etc.

1) By nulling a reference:
Employee e=new Employee();
e=null;
2) By assigning a reference to another:
Employee e1=new Employee();
Employee e2=new Employee();
e1=e2;//now the first object referred by e1 is available for garbage collection
3) By anonymous object:
new Employee();

-- Runtime class  : to interact with java runtime environment
Java Runtime class provides methods to execute a process, invoke GC, get total and free memory etc.
There is only one instance of java.lang.Runtime class is available for one java application.
The Runtime.getRuntime() method returns the singleton instance of Runtime class.
Methods:
static Runtime getRuntime()
void addShutdownHook(Thread hook)
long freeMemory()
long totalMemory()


