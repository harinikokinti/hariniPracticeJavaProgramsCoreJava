package com.harini.core.classExamples.innerClass;

/*
Java Inner class or Nested class is a class which is declared inside the class or interface.

Advantage of java inner classes:
--------------------------------
1) Nested classes represent a special type of relationship that is it can access all the members (data members and methods) of outer class including private.
2) Nested classes are used to develop more readable and maintainable code because it logically group classes and interfaces in one place only.
3) Code Optimization: It requires less code to write.

Difference between nested class and inner class in Java:
----------------------
Inner class is a part of nested class. Non-static nested classes are known as inner classes.

Types of Nested classes
---------------------
1. Non-static nested class (inner class)
    1. Member inner class
    2. Anonymous inner class
    3. Local inner class
2. Static nested class
 */


/* MEMBER INNER CLASS
A non-static class that is created inside a class but outside a method is called member inner class.
*/


public class MemberInnerClass {

    private int a = 20;
    private int b = 10;

    class InnerClass{
        void add(){System.out.println("sum of a and b are " + (a+b));}  // it can access private membe
    }

    public static void main(String args[]) {
        MemberInnerClass outerClassObject = new MemberInnerClass();
        MemberInnerClass.InnerClass innerClassObject = outerClassObject.new InnerClass();
        //InnerClass innerClassObject = new MemberInnerClass().new InnerClass();
        innerClassObject.add();
    }

}




/*

Internal code generated by the compiler
The java compiler creates a class file named Outer$Inner in this case. The Member inner class have the reference of Outer class that is why it can access all the data members of Outer class including private.

import java.io.PrintStream;
class Outer$Inner
{
    final Outer this$0;
    Outer$Inner()
    {   super();
        this$0 = Outer.this;
    }
    void msg()
    {
        System.out.println((new StringBuilder()).append("data is ")
                    .append(Outer.access$000(Outer.this)).toString());
    }
}
 */
